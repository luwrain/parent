
plugins {
id 'application'
  id 'java'
}
def commitCount = 'git rev-list --all --count'.execute().text.trim();
def lwrVer = '2.0.0';

allprojects {
repositories {
mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
//    maven { url "https://jcenter.bintray.com" }
//    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
}
}


ext.libraries = [
    base: [
    "com.google.code.gson:gson:2.8.5",
        "com.google.auto.service:auto-service:1.1.1",
    "org.apache.logging.log4j:log4j-core:2.17.0",
    "org.jsoup:jsoup:1.13.1",
    "org.codehaus.groovy:groovy:2.5.23"
    ],

        apacheBase: [
"org.apache.commons:commons-compress:1.23.0",
    "org.apache.commons:commons-vfs2:2.9.0",
    ],

    graalvm: [
    "org.graalvm.js:js:23.0.0"
    ],

    mcp: [
    "io.modelcontextprotocol.sdk:mcp:0.9.0"
    ],

    junit: [
      "org.junit.jupiter:junit-jupiter-api:5.10.2",
"org.junit.jupiter:junit-jupiter-engine:5.10.2"
],

autoService: [
"com.google.auto.service:auto-service:1.1.1"
]]


dependencies {
}

tasks.register('writeVer') {
        new File(buildDir, "version.txt").text = "$lwrVer.$commitCount\n"
	}

task downloadAndExtractData {
    def destDir = layout.buildDirectory.dir("luwrain-install/data").get().asFile
    doLast {
        if (!destDir.exists()) {
            destDir.mkdirs()
        }
        ['rhvoice-data.tar.xz', 'hunspell.tar.xz'].each { name ->
            def url = "https://download.luwrain.org/compilation/${name}"
            def file = new File(destDir, name)
            println "Downloading $url..."
            new URL(url).withInputStream { i ->
                file.withOutputStream { it << i }
            }

            println "Extracting ${name}..."
            exec {
                workingDir destDir
                commandLine 'tar', 'xf', name
            }
            file.delete()
        }
        def schemesDir = new File(destDir, "sounds/schemes")
        if (schemesDir.exists()) {
            schemesDir.deleteDir()
        }
    }
}


tasks.register('copyJars', Copy) {
  dependsOn build
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from(subprojects.findAll { it.tasks.findByName('jar') != null }.collect {
    it.tasks.named('jar').get().archiveFile.get().asFile
  })
  into "$buildDir/release/lib"
}

tasks.register('copyDeps', Copy) {
  dependsOn copyJars
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
def ver = ["":""]
subprojects .findAll(proj -> proj.configurations.findByName("runtimeClasspath") != null).each{ proj ->
proj.configurations.runtimeClasspath.incoming.artifactView {
componentFilter {
if (it .getDisplayName().indexOf("luwrain") >= 0)
return false
def n = it.getDisplayName().substring(0, it.getDisplayName().lastIndexOf(":"))
def v = it.getDisplayName().substring(it.getDisplayName().lastIndexOf(":") + 1)
if (!ver.containsKey(n) || ver.get(n).compareTo(v) < 0)
ver.put(n, v)
false
}
}.getFiles().each {}
}
subprojects .findAll(proj -> proj.configurations.findByName("runtimeClasspath") != null).each{ proj ->
proj.configurations.runtimeClasspath.incoming.artifactView {
componentFilter {
if (it.getDisplayName().indexOf("luwrain") >= 0)
return false
def n = it.getDisplayName().substring(0, it.getDisplayName().lastIndexOf(":"))
def v = it.getDisplayName().substring(it.getDisplayName().lastIndexOf(":") + 1)
ver.get(n).equals(v)
}
}.getFiles().each { a -> from a
}
}
  into "$buildDir/release/lib"
}

tasks.register('distFilesCommon', Copy) {
  dependsOn copyJars
  dependsOn copyDeps
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from ("$buildDir/release/lib") {
  into "lib"
  }
  from ("bundles/bin") {
  into "bin"
  }
    from ("core/COPYING") {
    into "COPYING.txt"
    }
      into "$buildDir/release/dist/common/luwrain-$lwrVer.$commitCount"
}

tasks.register('distFilesWin', Copy) {
  dependsOn copyJars
  dependsOn copyDeps
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from ("$buildDir/release/lib") {
  into "luwrain/lib"
      exclude '**/*javafx*.jar'
            exclude '**/*linux*.jar'
  }
    from ("bundles/win-installer") {
//  into "debian"
    filter { line ->
        line.replace('SUBST_VER', lwrVer + '.' + commitCount)
    }
  }
    from ("bundles/luwrain.ico") {
  into "luwrain"
  }
      into "$buildDir/release/dist/windows"
}


tasks.register('distFilesDeb', Copy) {
  dependsOn copyJars
  dependsOn copyDeps
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from ("$buildDir/release/lib") {
  into "lib"
        exclude '**/*javafx*.jar'
	        exclude '**/luwrain-windows.jar'
  }
    from ("bundles/debian") {
  into "debian"
    filter { line ->
        line.replace('SUBST_VER', lwrVer + '.' + commitCount)
    }
  }
      into "$buildDir/release/dist/deb"
}

tasks.register('distCommon', Zip) {
    dependsOn distFilesCommon
    archiveFileName = "luwrain-$lwrVer.$commitCount" + '.zip'
    destinationDirectory = file("$buildDir/release/dist")
    from("$buildDir/release/dist/common")
}


