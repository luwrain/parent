
plugins {
id 'application'
  id 'java'
}

allprojects {
repositories {
mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
//    maven { url "https://jcenter.bintray.com" }
//    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
}
}


ext.libraries = [
    base: [
    "com.google.code.gson:gson:2.8.5",
        "com.google.auto.service:auto-service:1.1.1",
    "org.apache.logging.log4j:log4j-core:2.17.0",
    "org.jsoup:jsoup:1.13.1",
    "org.codehaus.groovy:groovy:2.5.23"
    ],
        apacheBase: [
"org.apache.commons:commons-compress:1.23.0",
    "org.apache.commons:commons-vfs2:2.9.0",
    ],
    graalvm: [
    "org.graalvm.js:js:23.0.0"
    ],
    junit: [
      "org.junit.jupiter:junit-jupiter-api:5.10.2",
"org.junit.jupiter:junit-jupiter-engine:5.10.2"
]]


dependencies {
}

task downloadAndExtractData {
    def destDir = layout.buildDirectory.dir("luwrain-install/data").get().asFile
    doLast {
        if (!destDir.exists()) {
            destDir.mkdirs()
        }
        ['rhvoice-data.tar.xz', 'hunspell.tar.xz'].each { name ->
            def url = "https://download.luwrain.org/compilation/${name}"
            def file = new File(destDir, name)
            println "Downloading $url..."
            new URL(url).withInputStream { i ->
                file.withOutputStream { it << i }
            }

            println "Extracting ${name}..."
            exec {
                workingDir destDir
                commandLine 'tar', 'xf', name
            }
            file.delete()
        }
        def schemesDir = new File(destDir, "sounds/schemes")
        if (schemesDir.exists()) {
            schemesDir.deleteDir()
        }
    }
}


tasks.register('collectJars', Copy) {
  dependsOn build
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from(subprojects.findAll { it.tasks.findByName('jar') != null }.collect {
    it.tasks.named('jar').get().archiveFile.get().asFile
  })
  into "$buildDir/release/jar"
}

tasks.register('copyDeps', Copy) {
  dependsOn build
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  println("proba")
configurations {

commonConf {
  subprojects .findAll(proj -> proj.configurations.findByName("runtimeClasspath") != null).collect{ proj -> extendsFrom proj.configurations.findByName("runtimeClasspath")
//  println(getAllDependencies())
//each { file -> println(file) }
  }

}


}


//  subprojects .findAll(proj -> proj.configurations.findByName("runtimeClasspath") != null).collect{ proj -> configurations.commonConf.extendFrom proj.configurations.findByName("runtimeClasspath")}
//println(configurations.commonConf.runtimeClasspath)

from subprojects .findAll(proj -> proj.configurations.findByName("runtimeClasspath") != null).collect{ proj ->
//println(proj.configurations)
proj.configurations.findByName("runtimeClasspath").each {file-> file}
}
  into "$buildDir/release/jar"
}

